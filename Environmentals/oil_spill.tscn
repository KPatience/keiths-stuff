[gd_scene load_steps=9 format=3 uid="uid://flejhil1malf"]

[ext_resource type="Script" uid="uid://dcwbebpgedjd4" path="res://Environmentals/oil_spill.gd" id="1_adk64"]
[ext_resource type="Texture2D" uid="uid://dd8mjngsc8fiy" path="res://Assets/Textures/Splats/splat08.png" id="2_mx6jg"]

[sub_resource type="BoxShape3D" id="BoxShape3D_adk64"]
size = Vector3(4, 4, 4)

[sub_resource type="Shader" id="Shader_mx6jg"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.stable's StandardMaterial3D.

shader_type spatial;
render_mode unshaded, depth_draw_opaque, cull_back;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

varying float _dot;
void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
	_dot = dot(NORMAL, vec3(0., 1., 0.));
}

mat2 rot(float angle){
	return mat2(vec2(cos(angle), -sin(angle)), vec2(sin(angle), cos(angle)));
}

uniform sampler2D noise_tex: repeat_enable;

vec2 rot_UV(vec2 _UV, float angle){
	return  rot(angle) * (_UV - vec2(0.5)) + vec2(0.5);
}

float fresnel(float amount, vec3 normal, vec3 view)
{
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0 )), amount);
}

//void fragment()
//{
	//vec3 base_color = vec3(0.0);
	//float basic_fresnel = fresnel(3.0, NORMAL, VIEW);
	//ALBEDO = base_color + basic_fresnel;
//}

void fragment() {
	vec2 base_uv = UV;
	vec4 noise_tex_sample_1 = texture(noise_tex, rot_UV(0.2 * UV, 100.));
	float _offset_1 = (0.4 + 0.2 * sin(0.01 * TIME)) * noise_tex_sample_1.r;
	vec4 noise_tex_sample_2 = texture(noise_tex, rot_UV(0.5 * UV, 300.) - _offset_1);
	float _offset_2 = (0.4 + 0.214 * cos(0.0145 * TIME)) * noise_tex_sample_2.r;
	vec4 noise_tex_sample_3 = texture(noise_tex, rot_UV(0.5* UV, 213.) + _offset_2);
	vec4 albedo_tex = texture(texture_albedo, base_uv - 0.1 * noise_tex_sample_3.r);
	
	float ss = smoothstep(0.5, 0.55, noise_tex_sample_3.r);
	ALBEDO = noise_tex_sample_3.r * albedo.rgb + ss * fresnel(5.0, NORMAL, VIEW) * noise_tex_sample_1.r;
	ALPHA = albedo_tex.w * _dot;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_mx6jg"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_wceh4"]
seamless = true
noise = SubResource("FastNoiseLite_mx6jg")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_wceh4"]
render_priority = 0
shader = SubResource("Shader_mx6jg")
shader_parameter/albedo = Color(0.136826, 0.136826, 0.136826, 1)
shader_parameter/texture_albedo = ExtResource("2_mx6jg")
shader_parameter/uv1_scale = Vector3(3, 2, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/noise_tex = SubResource("NoiseTexture2D_wceh4")

[sub_resource type="BoxMesh" id="BoxMesh_wceh4"]

[node name="OilSpill" type="Node3D"]
script = ExtResource("1_adk64")

[node name="Area3D" type="Area3D" parent="."]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Area3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.529549, 0)
shape = SubResource("BoxShape3D_adk64")
debug_color = Color(0.841, 0.001, 0.922, 0.713)

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(5, 0, 0, 0, 5, 0, 0, 0, 5, 0, -2.06641, 0)
material_override = SubResource("ShaderMaterial_wceh4")
mesh = SubResource("BoxMesh_wceh4")
